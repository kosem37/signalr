@cmd:`pipe.server.placeBet=function (payIn, guessLow, guessHigh, clientSeed, currencyId, newProtocol) { if (!pipe.betsAllowed) { return; } if (pipe.server.isBetOutstanding && !config.prefs.overlappingBetsAllowed) { return; } if (pipe.server.overlappingBetCount > 5) { return; } pipe.server.isBetOutstanding = true; ++pipe.server.overlappingBetCount; $.connection.mainHub.server.placeBet(payIn, guessLow, guessHigh, clientSeed, currencyId, newProtocol).done(function (result) { pipe.server.isBetOutstanding = false; --pipe.server.overlappingBetCount; switch (result.status) { case 0: var bet = new BetInfo(); bet.accountId = data.user.accountId; bet.betCount = 1; bet.betWins = result.secret >= guessLow && result.secret <= guessHigh ? 1 : 0; bet.secret = result.secret; bet.clientSeed = clientSeed; bet.currencyId = currencyId; bet.guessHigh = guessHigh; bet.guessLow = guessLow; bet.id = result.id; bet.payIn = result.payIn; bet.payOut = result.payOut; bet.name = data.user.friendlyName; var c = data.user.currencyStats[currencyId]; var s = data.site.betStats[currencyId]; data.user.serverSeedHash = result.next ? result.next : null; if (pipe.server.lastReceivedBetId < bet.id) { pipe.server.lastReceivedBetId = bet.id; c.balance = result.startingBalance - bet.payIn * bet.payOut; } ++c.betStats.count; ++s.count; c.betStats.payIn += bet.payIn; c.betStats.payOut += bet.payOut; s.payIn += bet.payIn; s.payOut += bet.payOut; if (bet.betWins) { ++c.betStats.winCount; ++s.winCount; } if (pipe.events.betComplete) { pipe.events.betComplete(bet, result.delay); } break; case 2: if (pipe.events.betChanceExceedsMaximum) { pipe.events.betChanceExceedsMaximum(result.msg); } break; case 3: if (pipe.events.betChanceLessThanMinimum) { pipe.events.betChanceLessThanMinimum(result.msg); } break; case 4: if (pipe.events.betInsufficientFunds) { pipe.events.betInsufficientFunds(result.msg); } break; case 5: if (pipe.events.betNoPossibleProfit) { pipe.events.betNoPossibleProfit(result.msg); } break; case 6: if (pipe.events.betPayoutCouldExceedMaximum) { pipe.events.betPayoutCouldExceedMaximum(result.msg); } break; case 7: if (pipe.events.betExceedsRateLimit) { pipe.events.betExceedsRateLimit(result.msg); } break; default: if (pipe.events.betError) { pipe.events.betError(result.msg); } break; } }).fail(function (e) { --pipe.server.overlappingBetCount; pipe.server.isBetOutstanding = false; });`;
.redteam { cmd: "@{cmd}" }
